 @*****************************************************************************
 @ 2015 olegk0 <olegvedi@gmail.com>
 @
 @ This program is free software; you can redistribute it and/or modify
 @ it under the terms of the GNU Lesser General Public License as published by
 @ the Free Software Foundation; either version 2.1 of the License, or
 @ (at your option) any later version.
 @
 @ This program is distributed in the hope that it will be useful,
 @ but WITHOUT ANY WARRANTY; without even the implied warranty of
 @ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 @ GNU Lesser General Public License for more details.
 @
 @ You should have received a copy of the GNU Lesser General Public License
 @ along with this program; if not, write to the Free Software Foundation,
 @ Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 @****************************************************************************/

	.syntax unified
	.arch armv7-a
	.fpu neon
	.text

#define ARGB	r0
#define I8	r1
#define WIDTH	r2
#define HEIGHT	r3
#define A8	r4
#define DPITCH	r5
#define DPAD	r5
	@ Color Table
#define CT	r6
#define SPITCH	r8
#define SPAD	r8
#define CNT	lr

    .global iargb_argb_asm
    .type	iargb_argb_asm, %function
iargb_argb_asm:
    push	{r4-r9,lr}
    ldmia	r0, {ARGB, DPITCH}
    ldmia	r1, {I8, A8, CT, SPITCH}

    cmp		HEIGHT, #0
    sub		DPAD, DPITCH, WIDTH, lsl #2
    sub		SPAD, SPITCH, WIDTH, lsl #1
1:
    movsgt	CNT, WIDTH
    pople	{r4-r9,pc}
2:
    ldrb	r7, [I8], #2 @ index RGB
    ldrb	r9, [A8], #2 @ alpha channel
    ldr		r7, [CT, r7, lsl #2] @ get RGB from table
    orr		r7, r7, r9, lsl #24 @ mix RGB and Alpha
    str		r7, [ARGB], #4

    subs	CNT, #1
    bne		2b

    subs	HEIGHT, #1
    add		ARGB, DPAD
    add		I8, SPAD
    add		A8, SPAD
    b		1b

@*******************************************************************
#define ARGB	r0
#define A8	r1
#define WIDTH	r2
#define HEIGHT	r3
#define COLOR	r4
#define DPITCH	r5
#define DPAD	r5
#define SPITCH	r6
#define SPAD	r6
#define CNT	lr

    .global a8_argb_asm
    .type	a8_argb_asm, %function
a8_argb_asm:
    push	{r4-r8,lr}
    vpush	{d0-d2}

    ldmia	r0, {ARGB, DPITCH}
    ldmia	r1, {A8, COLOR, SPITCH}

    cmp		HEIGHT, #1
    blt		3f
    cmp		WIDTH, #2
    blt		3f

    bic		WIDTH, #1

    sub		DPAD, DPITCH, WIDTH, lsl #2
    sub		SPAD, SPITCH, WIDTH

    vdup.32	d0, COLOR
    mov		r4, #7
1:
    mov		CNT, WIDTH
2:
    ldrb	r7, [A8], #1 @ alpha channel
    ldrb	r8, [A8], #1 @ alpha channel
@    orr		r7, COLOR, r7, lsl #24 @ mix RGB and Alpha
@    str		r7, [ARGB], #4

    lsr		r7, #5
    sub		r7, r7, r4
    lsr		r8, #5
    sub		r8, r8, r4

    vdup.8	d1, r7
    vdup.8	d2, r8
@	d1 = s2,s3
@	d2 = s4,s5
    vmov	s3, s4

    vshl.u8	d1, d0, d1

@mov	r7, #1
@vdup.8	d2, r7
@vbic	d1, d1, d2

    vst1.8	{d1}, [ARGB]! @ 2px - 8 bytes

    subs	CNT, #2
@    subs	CNT, #1
    bne		2b

    subs	HEIGHT, #1
    add		ARGB, DPAD
    add		A8, SPAD
    bne		1b
3:
    vpop	{d0-d2}
    pop		{r4-r8,pc}

@*******************************************************************


#define DST	r0
#define SRC	r1
#define WIDTH	r2
#define HEIGHT	r3
#define SPITCH0	r4
#define SPAD0	r4
#define DPITCH	r5
#define DPAD	r5
#define CNT	lr

    .global copy_bytes_asm
    .type copy_bytes_asm, %function
copy_bytes_asm:
    push	{r4-r6,lr}
    ldmia	r0,	{DST, DPITCH}
    ldmia	r1,	{SRC, SPITCH0}

    cmp		HEIGHT,	#1
    blt		3f
    cmp		WIDTH, #1
    blt		3f

    sub		DPAD, DPITCH, WIDTH
    sub		SPAD0, SPITCH0, WIDTH
1:
    mov		CNT, WIDTH

copyloopb:

    ldrb	r6, [SRC], #1
    strb	r6, [DST], #1
    subs	CNT, #1
    bne		copyloopb

    add		SRC, SPAD0
    add		DST, DPAD
    subs	HEIGHT, #1
    bgt		1b
3:
    pop		{r4-r6,pc}

@*******************************************************************

#define DST	r0
#define SRC	r1
#define WIDTH	r2
#define HEIGHT	r3
#define SPITCH0	r4
#define SPAD0	r4
#define DPITCH	r5
#define DPAD	r5
#define CNT	lr

    .global copy_words_asm
    .type copy_words_asm, %function
copy_words_asm:
    push	{r4-r6,lr}
    ldmia	r0,	{DST, DPITCH}
    ldmia	r1,	{SRC, SPITCH0}

    cmp		HEIGHT,	#1
    blt		3f
    cmp		WIDTH, #1
    blt		3f

    sub		DPAD, DPITCH, WIDTH, lsl #2
    sub		SPAD0, SPITCH0, WIDTH, lsl #2
1:
    mov		CNT, WIDTH

copyloopw:

    ldr		r6, [SRC], #4
    str		r6, [DST], #4
    subs	CNT, #1
    bne		copyloopw

    add		SRC, SPAD0
    add		DST, DPAD
    subs	HEIGHT, #1
    bgt		1b
3:
    pop		{r4-r6,pc}
